// content-creator.js (v8 - Versi√≥n Definitiva con L√≥gica de CTA y Protecci√≥n de Errores)

// 1. M√≥dulos y dependencias
require('dotenv').config();
const { MongoClient, ObjectId } = require('mongodb');
const { GoogleGenerativeAI } = require('@google/generative-ai');
const { publishToAflandBlog, uploadImageToWordPress } = require('./afland-publisher');
const { marked } = require('marked');

// 2. Configuraci√≥n
const mongoUri = process.env.MONGO_URI;
const dbName = process.env.DB_NAME || 'DuendeDB';
const eventsCollectionName = 'events';
const aflandToken = process.env.AFLAND_API_KEY; // Corregido: lee la variable correcta
const geminiApiKey = process.env.GEMINI_API_KEY;

if (!mongoUri || !geminiApiKey || !aflandToken) {
    throw new Error('Faltan variables de entorno cr√≠ticas.');
}

const genAI = new GoogleGenerativeAI(geminiApiKey);
const model = genAI.getGenerativeModel({ model: 'gemini-1.5-flash' });

// ... (Las funciones de utilidad y el prompt se mantienen igual) ...

// ... (c√≥digo anterior) ...

async function generateStructuredPost(event) {
    const eventDateFormatted = new Date(event.date).toLocaleDateString('es-ES', {
        weekday: 'long', day: 'numeric', month: 'long', year: 'numeric'
    });
    let extraContext = '';
    if (event.nightPlan && event.nightPlan.trim() !== '') {
        console.log("    -> ‚ú® ¬°Enriqueciendo post con datos de 'Planear Noche'!");
        extraContext = `
# INFORMACI√ìN ADICIONAL PARA ENRIQUECER EL POST
Usa la siguiente gu√≠a local para a√±adir secciones o detalles extra al cuerpo del post. Int√©gralo de forma natural.
Contenido Adicional:
${event.nightPlan}
`;
    }

    // --- L√≥gica para la llamada a la acci√≥n (CTA) ---
    let callToAction;
    if (event.affiliateLink && event.affiliateLink.trim() !== '') {
        callToAction = `Entradas disponibles aqu√≠: ${event.affiliateLink}`;
    } else {
        callToAction = `Entradas disponibles pr√≥ximamente.`;
    }

    // --- AQUI EST√Å EL NUEVO PROMPT INTEGRADO ---
    const prompt = `
# CONTEXTO
Eres "Duende", un experto redactor de SEO para el blog "Duende Finder" (afland.es). Tu objetivo es crear un post de blog atractivo sobre un evento de flamenco.
Tu tono es siempre apasionado, evocador y accesible. Usa emojis üíÉüé∂üî• de forma natural.

# INSTRUCCIONES PARA EL POST
Crea un post para Duende Finder sobre un evento de flamenco. El post debe ser atractivo, informativo y optimizado para SEO, compensando la falta de imagen destacada con una estructura clara y un lenguaje evocador.

# DATOS DEL EVENTO
- Nombre: ${event.name}
- Artista(s): ${event.artist}
- Fecha: ${eventDateFormatted}
- Hora: ${event.time}
- Lugar: ${event.venue}, ${event.city}
- URL de la fuente/compra de entradas: ${event.affiliateLink || 'No disponible'}
- Descripci√≥n del evento: ${event.description || 'No se proporcion√≥ una descripci√≥n del evento.'}

${extraContext}

# TAREA Y REGLAS DE FORMATO
Tu √∫nica salida debe ser texto estructurado con las siguientes secciones, separadas por "---". Cada secci√≥n debe tener su etiqueta en la primera l√≠nea.

SLUG:
[Crea un slug corto, en min√∫sculas, sin acentos ni caracteres especiales, optimizado para SEO (4-5 palabras clave).]
---
META_TITLE:
[Crea un t√≠tulo SEO de menos de 60 caracteres que sea persuasivo y atractivo. Incluye la palabra clave principal y el nombre del artista o lugar.]
---
META_DESC:
[Crea una meta descripci√≥n de menos de 155 caracteres. Incluye la palabra clave principal, un verbo de acci√≥n y una frase persuasiva.]
---
POST_TITLE:
[Crea un t√≠tulo H1 atractivo para el post, usando una estructura como "Concierto en [Ciudad]: [T√≠tulo Atractivo]".]
---
POST_CONTENT:
[Escribe aqu√≠ el cuerpo del post en formato Markdown (300-400 palabras). El post debe seguir esta estructura:
1. **Introducci√≥n:** Un p√°rrafo corto y vibrante (aprox. 50 palabras) que introduzca el evento, creando una atm√≥sfera emocional.
2. **Cuerpo del Contenido (2-3 P√°rrafos):** Explica en detalle sobre el artista, el palo que interpretar√°, la atm√≥sfera del lugar y la historia del evento. Incorpora palabras clave secundarias (LSI) de forma natural (ej. cante, toque, baile, artistas flamencos, agenda flamenca).
3. **Llamada a la Acci√≥n (CTA):** Un p√°rrafo final o un subt√≠tulo (H3) con el enlace de compra o el texto de "pr√≥ximamente".

Incluye el enlace a "Duende Finder" de forma natural en alg√∫n punto del texto, con el texto "todos los conciertos y eventos en nuestro buscador" y el enlace a https://buscador.afland.es/.

Finaliza con la llamada a la acci√≥n para el usuario, que debe decir: "${callToAction}".]
`;
    try {
        const result = await model.generateContent(prompt);
        return result.response.text();
    } catch (error) {
        console.error('‚ùå Error al generar contenido con Gemini:', error);
        return null;
    }
}

async function updateEventStatus(collection, eventId, status) {
    try {
        await collection.updateOne(
            { _id: new ObjectId(eventId) },
            { $set: { contentStatus: status } }
        );
        console.log(`üéâ Evento con ID: ${eventId} actualizado a estado: ${status}.`);
    } catch (error) {
        console.error(`‚ùå Error al actualizar el estado del evento ${eventId}:`, error);
    }
}

// 3. Funci√≥n principal del script
async function runContentCreator() {
    console.log('üöÄ Iniciando el creador de contenidos (v8 con l√≥gica de CTA y protecci√≥n de errores)...');
    const client = new MongoClient(mongoUri);
    try {
        await client.connect();
        console.log('‚úÖ Conectado a MongoDB.');

        const db = client.db(dbName);
        const eventsCollection = db.collection(eventsCollectionName);

        // --- C√ÅLCULO DE LA FECHA L√çMITE (3 D√çAS EN EL FUTURO) ---
        const today = new Date();
        const threeDaysFromNow = new Date(today.setDate(today.getDate() + 3));
        const minDateString = threeDaysFromNow.toISOString().split('T')[0];

        console.log(`üîé Buscando eventos pendientes con imagen a partir de: ${minDateString}`);

        // --- LA CONSULTA S√öPER INTELIGENTE CON TODOS LOS FILTROS ---
        const pendingEvents = await eventsCollection.find({
            contentStatus: 'pending',
            imageUrl: { $ne: null },
            date: { $gte: minDateString } // <-- FILTRO DE 3 D√çAS A√ëADIDO
        }).sort({
            verified: -1,
            date: 1
        }).limit(5).toArray();
        // --- FIN DE LA CONSULTA ---

        if (pendingEvents.length === 0) {
            console.log('‚úÖ No hay eventos pendientes (que cumplan todos los criterios) por procesar.');
            return;
        }

        console.log(`Encontrados ${pendingEvents.length} eventos prioritarios para procesar.`);

        let publishTime = new Date();
        const timeIncrement = 60 * 60 * 1000;

        for (const event of pendingEvents) {
            console.log(`\n‚ú® Procesando evento con ID: ${event._id}`);
            const structuredPost = await generateStructuredPost(event);

            if (structuredPost) {
                const parts = structuredPost.split('---');
                const slug = parts[0]?.replace('SLUG:', '').trim();
                const metaTitle = parts[1]?.replace('META_TITLE:', '').trim();
                const metaDesc = parts[2]?.replace('META_DESC:', '').trim();
                const postTitle = parts[3]?.replace('POST_TITLE:', '').trim();
                const markdownContent = parts[4]?.replace('POST_CONTENT:', '').trim();

                if (!slug || !metaTitle || !markdownContent) {
                    console.log('üî¥ La IA no devolvi√≥ una respuesta estructurada v√°lida. Actualizando a "failed".');
                    await updateEventStatus(eventsCollection, event._id, 'failed');
                    continue;
                }

                const htmlContent = marked(markdownContent);
                let featuredMediaId = null;
                if (event.imageUrl) {
                    featuredMediaId = await uploadImageToWordPress(event.imageUrl, aflandToken);
                }

                publishTime = new Date(publishTime.getTime() + timeIncrement);
                console.log(`‚è≥ Programando post "${postTitle}" para: ${publishTime.toLocaleString()}`);

                // ... dentro del bucle for (const event of pendingEvents)

                await publishToAflandBlog({
                    title: postTitle,
                    content: htmlContent,
                    slug: slug, // <-- C√ìDIGO A√ëADIDO: Pasamos el slug a WordPress
                    status: 'future',
                    date: publishTime.toISOString(),
                    meta: {
                        _aioseo_title: metaTitle,
                        _aioseo_description: metaDesc
                    }
                }, aflandToken, featuredMediaId);

                // ...

                await updateEventStatus(eventsCollection, event._id, 'processed');
            } else {
                console.log('üî¥ No se pudo generar contenido para el evento. Actualizando a "failed".');
                await updateEventStatus(eventsCollection, event._id, 'failed');
            }
        }
    } catch (error) {
        console.error('‚ùå Ha ocurrido un error general:', error);
    } finally {
        await client.close();
        console.log('\n‚úÖ Conexi√≥n a MongoDB cerrada.');
        console.log('‚úÖ Proceso del creador de contenidos finalizado.');
    }
}

// 6. Ejecuci√≥n del script
runContentCreator();
